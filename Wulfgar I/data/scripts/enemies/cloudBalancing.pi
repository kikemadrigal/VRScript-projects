namespace es_tipolisto_caballeroVara_enemies;

class CloudBalancing implements Enemy{
    properties:
        fires=[];

    virtual _operator_new(_name,_creator, _params){
        switch (type){
            case ENEMY_TYPE_DRAGON:
                Addanimationwithsheet("dragon",game.GetApp().path+"images/objects-enemies.png",0,2,0,16*32,64,64,-1,-1,-1,.2);    
                Setanimation("dragon");
                touches_for_died=10;
                Setcollisionrect(0,30,64,24);
                type=ENEMY_TYPE_DRAGON; 
                break;
            case ENEMY_TYPE_DRAGON_BLUE:
                 Addanimationwithsheet("dragon_blue",game.GetApp().path+"images/objects-enemies.png",0,2,0,20*32,64,64,-1,-1,-1,.2);
                Setanimation("dragon_blue");
                touches_for_died=10;
                Setcollisionrect(0,20,64,44);
                type=ENEMY_TYPE_DRAGON_BLUE;
                break;
            case ENEMY_TYPE_CLOUD:
                Addanimationwithsheet("cloud",game.GetApp().path+"images/objects-enemies.png",0,3,20*32,4*32,32,32,-1,-1,-1,.2);
                Setanimation("cloud");
                type=ENEMY_TYPE_CLOUD; 
                break;
        }
            
        //Creamos un buffer de 5 fuegos
        for(i=0;i<3;i++){
            _fire=game.create_fire(FIRE_TYPE_NORMAL,this); 
            // Los sacamos de la pantalla
            _fire.SetPos(-100,-100);
            _fire.incrementoY=0;
            _fire.incrementoX=0;
            fires+=[_fire];
        }
    }
    virtual Move(){
        if(GetCurAnimation() =="enemy-dead" && GetAnimationLoops()>0){
			Destroy();
			return;
		} 
        // Como para las instancias que se salen de la cámara
        // si se aleja mucho lo acercamos al player
        //evitamos que se desactive si se sale de la pantalla
        //if(GetX()<game.player1.GetX()-350)SetX(game.player1.GetX()-350);
        if(GetX()>game.player1.GetX()+450){
            SetPos(GetX()-100,GetY());
        }else if(GetX()<game.player1.GetX()-450){
            SetPos(GetX()+64,GetY());
        }
        //Esto hace que persiga al player y qe se quede dando vueltas encima
        if(GetX()>game.player1.GetX()+10 && GetX()>game.player1.GetX()+20){
            speedX=-2;
            SetHFlip(true);
        }else if(GetX()<game.player1.GetX()-10 && GetX()<game.player1.GetX()-20){
            SetHFlip(false);
            speedX=2;
        }

        //Creamos el fuego cuando las animaciones sean mayor que 12
        if(GetAnimationLoops()>3){
            // obtenemos un fire con una velocidad 0 y le cambiamos el ámgulo
            for(i=0;i<sizeof(fires);i++){
                _fire=fires[i];
                /*if(_fire.incrementoY==0){
                    _fire.SetPos(GetX(),GetY()+32);
                    _fire.incrementoY=2;
                    break;
                }*/
               if(_fire.incrementoY==0){
                    _fire.SetPos(GetX()-10,GetY()+10);
                    if(game.player1.GetY()<GetY()){
                        _fire.incrementoY=-5;
                        _fire.SetVFlip(false);
                    }
                    else {
                        _fire.incrementoY=5;
                        _fire.SetVFlip(true);
                    }
                    break;
                }
            }
            ResetAnimation ();
        }
        incpos(speedX,speedY);
    }

    
	virtual _operator_delete(){
		//game.delete_fires();
	}
}