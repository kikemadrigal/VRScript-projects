namespace es_tipolisto_caballeroVara_enemies;

class HorizontalPlatform implements Enemy{
    properties:
        animation="";

    virtual _operator_new(_name,_creator, _params){
    
        switch (type){
            case ENEMY_TYPE_SQUIRREL:
                Addanimationwithsheet("escorpion",game.GetApp().path+"images/objects-enemies.png",0,5,0,11*32,32,32,-1,-1,-1,.2);
                Setanimation("escorpion");
                speedX=3;
                type=ENEMY_TYPE_SQUIRREL; 
                break;
            case ENEMY_TYPE_SPIDER:
                Addanimationwithsheet("spider",game.GetApp().path+"images/objects-enemies.png",0,2,9*32,20*32,32,32,-1,-1,-1,.2);
                Setanimation("spider");
                type=ENEMY_TYPE_SPIDER;  
                speedX=3;
                break;
            //cangrejo
            case ENEMY_TYPE_CRAB:
                Addanimationwithsheet("carb",game.GetApp().path+"images/objects-enemies.png",0,3,9*32,7*32,32,32,-1,-1,-1,.2);
                Setanimation("carb");
                speedX=3;
                type=ENEMY_TYPE_CRAB; 
                break;
            case ENEMY_TYPE_SMALL_SKULL:
                Addanimationwithsheet("small-skull",game.GetApp().path+"images/objects-enemies.png",0,3,9*32,15*32,32,32,-1,-1,-1,.2);
                Setanimation("small-skull");
                speedX=-3;
                type=ENEMY_TYPE_SMALL_SKULL; 
                break;
            case ENEMY_TYPE_BOMB:
                Addanimationwithsheet("bomb",game.GetApp().path+"images/objects-enemies.png",0,5,0,22*32,32,32,-1,-1,-1,.2);
                Setanimation("bomb");
                speedX=-3;
                type=ENEMY_TYPE_BOMB;  
                break;
            case ENEMY_TYPE_TURTLE:
                Addanimationwithsheet("turtle",game.GetApp().path+"images/objects-enemies.png",0,3,9*32,6*32,32,32,-1,-1,-1,.2);
                Setanimation("turtle");
                speedX=-3;
                type=ENEMY_TYPE_TURTLE;  
                break;
            case ENEMY_TYPE_HEDGEHOG:
                Addanimationwithsheet("Hedgehog",game.GetApp().path+"images/objects-enemies.png",0,3,0,18*32,32,32,-1,-1,-1,.2);    
                Setanimation("Hedgehog");
                speedX=-3;
                type=ENEMY_TYPE_HEDGEHOG;  
                break;
            case ENEMY_TYPE_WILD_PIG:
                Addanimationwithsheet("wildpig",game.GetApp().path+"images/objects-enemies.png",0,3,0,23*32,32,32,-1,-1,-1,.2);    
                Setanimation("wildpig");
                speedX=-3;
                type=ENEMY_TYPE_WILD_PIG;  
                break;
        }
        
    }

    virtual Move(){
        if(GetCurAnimation() =="enemy-dead" && GetAnimationLoops()>0){
			Destroy();
			return;
		} 
        _tile_down=TILE_TYPE_EMPTY;
			
        if(speedX<0){
            _tile_left=game.get_tile_left_object(GetX(),GetY());
            //Si a la izquierda hay un tile vacío
            if(_tile_left>TILE_TYPE_GROUND || _tile_left==TILE_TYPE_EMPTY){
                //obtenemos el tile de abajo para comprobar si está vacío
                _tile_down=game.get_tile_down_object(GetX()-32, GetY());
            }else{
                speedX=-3;
            }
            
        }else{
            _tile_right=game.get_tile_right_object(GetX(),GetY());
            if(_tile_right>TILE_TYPE_GROUND ||_tile_right==TILE_TYPE_EMPTY){
                _tile_down=game.get_tile_down_object(GetX(), GetY());
            }else{
                speedX=3;
            }
            
        }
        
        
        if(_tile_down>TILE_TYPE_GROUND || _tile_down==TILE_TYPE_EMPTY){
            if(speedX>0){
                SetHFlip(True);
                speedX=-3;
            }else{
                SetHFlip(False);
                speedX=3;
            }
        }
        incpos(speedX,speedY);
    }
    
	virtual _operator_delete(){
	}
}