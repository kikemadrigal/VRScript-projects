namespace es_tipolisto_caballeroVara;

class Game implements GL_Stage{
    properties:
        bg=null;
        player1=null;
        Objects=[]; 
        fires=[];
        enemies=[];
        mapper=null;
        layer=null;
        stage=null;

        //GROUND_Y=20*32;
        //450 de alto /32 = 14, pero el player ocupa 2 tiles (64x64px), por lo tanto nuestro player estara en 10
        GROUND_Y=10*32;
        //la pantalla 12 es la oscura
        // la 13 es  la vertical
        //La 14 es la que va corriendo
        currentStage=12;
        shadow_mode=false;
        background_moving=false;

    virtual _operator_new(_name,_creators){
        mapper =NewObject("mapper","gl_mapper");
        player1=NewObject("player","Player",[this]);
        ChangeStage();
    }
    virtual _operator_delete(){
        /*bg.Destroy();
        delete player1;
        Objects=null; 
        fires=null;
        enemies=null;
        currentStage=0;
        mapper=null;
        layer=null;
        tileSet=null;
        stage=null;*/
    }
    virtual Move(){
        //Esto es olo para la pantalla 13 que sale una sombra
        if(shadow_mode){
            stage.shadow.SetPos(player1.GetX()-736+32,player1.GetY()-450); 
            //vamos a motrar solo los objetos que estén a menos de 100 pixeles
            for(x=0; x<sizeof(objects);x++) {
                if(player1.DistanceTo(objects[x])<160) objects[x].SetVisible(true);
                else objects[x].SetVisible(false);
            }
            for(y=0; y<sizeof(enemies);y++) {
                if(player1.DistanceTo(enemies[y])<160){
                    //enemies[y].Start();
                    enemies[y].SetVisible(true);
                } else {
                    enemies[y].SetVisible(false);
                    //if( enemies[y].GetItemType()==ENEMY_TYPE_VULTURE)enemies[y].pause();
                }
            }
        } 
    
        if(background_moving){
            stage.bgr.IncUV(0.005f,0);
        }
    }

    function print_score(){    
        message="Stage: "+currentStage+
                "  Score: "+player1.score+
                " Lives: "+player1.lives+
                " Keys: "+player1.keys_to_collect;    
        if(DEBUG_MODE){
            message+="\nLayers: "+mapper.GetNumLayers()+
                     " right: "+get_tile_right(player1.GetX(),player1.GetY())+
                     " left: "+get_tile_left(player1.GetX(),player1.GetY())+
                     " down: "+get_tile_down(player1.GetX(),player1.GetY());
            message+="\nEnemies: "+sizeof(enemies)+
                    " objects "+sizeof(Objects)+
                    " fires "+sizeof(fires);
            message+="\nFPS: "+GETFPS(1);
        }
        GetApp().stageGlobal.text_score.SetText(message);
    }
    function print_score(_score){
        GetApp().stageGlobal.text_score.SetText(""+_score);
    }
    function draw_boss_live(live){
		 GetApp().stageGlobal.text_boss_live.SetText(""+live);
	}  
    function print_text_game(_text){
        GetApp().stageGlobal.text_game.SetText(_text);
    } 
    function get_tile(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+32,_y+32);
        cell=layer.Get(tile[0] ,tile[1]);    
        return cell[1];
    }
    function get_tile_up(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+32,_y);
        cell=layer.Get(tile[0] ,tile[1]);    
        return cell[1];
    }
    function get_tile_down(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+32,_y+player1.GetHF());
        cell=layer.Get(tile[0] ,tile[1]);
        return cell[1];
    }
    function get_tile_right(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+42,_y+40);
        cell=layer.Get(tile[0] ,tile[1]);
        return cell[1];
    }
    function get_tile_left(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+20,_y+40);
        cell=layer.Get(tile[0] ,tile[1]);
        return cell[1];
    }
    function get_tile_right_object(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+32,_y);
        cell=layer.Get(tile[0] ,tile[1]);
        //GetEngine().LogPrint(""+cell[1]);
        return cell[1];
    }
    function get_tile_left_object(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x,_y);
        cell=layer.Get(tile[0] ,tile[1]);
        //GetEngine().LogPrint(""+cell[1]);
        return cell[1];
    }
    function get_tile_down_object(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+32,_y+32);
        cell=layer.Get(tile[0] ,tile[1]);
        return cell[1];
    }
    function set_tile(_x,_y,_tile){
        layer=mapper.GetLayer(1);
        //layer.Set(_x+42,_y+32, tileset, _tile);
        layer.Set(0,0, 1, 1);
    }
    function AddActor(_name, _type, _x, _y, _params)
	{
		switch (_type)
		{
            /**
             * Objetos
             */
            case "llaves":
                create_object(OBJECT_TYPE_COLLECTIBLE_KEY,_x, _y);
                break;  
            case "moneda50":
                create_object(OBJECT_TYPE_COLLECTIBLE_COIN50,_x, _y);
                break;  
            case "moneda100":
                create_object(OBJECT_TYPE_COLLECTIBLE_COIN100,_x, _y);
                break;  
            case "plataforma_horizontal":
                create_object(OBJECT_TYPE_PLATFORM_HORIZONTAL,_x, _y);
                break; 
            case "plataforma_vertical":
                create_object(OBJECT_TYPE_PLATFORM_VERTICAL,_x, _y);
                break; 
            case "fuego_que_mata":
                create_object(OBJECT_TYPE_FIRE_DEATH,_x, _y);
                break;  
            case "lava":
                create_object(OBJECT_TYPE_LAVA,_x, _y);
                break;  
            case "paja":
                create_object(OBJECT_TYPE_SAND,_x, _y);
                break;  
            /**
             * Enemigos
             */
            case "escorpion":
                create_enemy(ENEMY_TYPE_SQUIRREL,_x, _y);
                break;  
            case "buitre":
                create_enemy(ENEMY_TYPE_VULTURE,_x, _y);
                break;  
            case "monstruo1":
                create_enemy(ENEMY_TYPE_SHOOT_PLAYER_HORIZONTAL,_x, _y);
                break; 
            case "monstruo2":
                create_enemy(ENEMY_TYPE_SHOOT_PLAYER_VERTICAL,_x, _y);
                break; 
            case "sierra":
                create_enemy(ENEMY_TYPE_SAW,_x, _y);
                break;
            case "pendulo":
                create_enemy(ENEMY_TYPE_PENDULUM,_x, _y);
                break;
            case "ladrillo-que-aplasta":
                create_enemy(ENEMY_TYPE_CRUSHING_BRICK,_x, _y);
                break;
            case "bomba":
                create_enemy(ENEMY_TYPE_BOMB,_x, _y);
                break;
            case "murcielago":
                create_enemy(ENEMY_TYPE_BAT,_x, _y);
                break;
            case "martillo":
                create_enemy(ENEMY_TYPE_HAMMER,_x, _y);
                break;
            case "araña":
                create_enemy(ENEMY_TYPE_SPIDER,_x, _y);
                break;
            case "calavera-pequeña":
                create_enemy(ENEMY_TYPE_SMALL_SKULL,_x, _y);
                break;
            case "calavera-grande":
                create_enemy(ENEMY_TYPE_LARGE_SKULL,_x, _y);
                break;
            case "tortuga":
                create_enemy(ENEMY_TYPE_TURTLE,_x, _y);
                break;
            case "cangrejo":
                create_enemy(ENEMY_TYPE_CRAB,_x, _y);
                break;
            case "erizo":
                create_enemy(ENEMY_TYPE_HEDGEHOG,_x, _y);
                break;
            case "ladron":
                create_enemy(ENEMY_TYPE_THIEF,_x, _y);
                break;
            case "jabali":
                create_enemy(ENEMY_TYPE_WILD_PIG,_x, _y);
                break;
            case "murcielago-dormido":
                create_enemy(ENEMY_TYPE_SLEEPING_BAT,_x, _y);
                break;
            case "bomba-paracidas":
                create_enemy(ENEMY_TYPE_PARACHUTE_BOMB,_x, _y);
                break;
            case "rinoceronte":
                create_enemy(ENEMY_TYPE_RHINOCEROS,_x, _y);
                break;
                
            default:
                GetEngine().LogPrint("Tipo de actor no definido: "+_type);
                break;
		}
	}




    function ChangeStage(){
        GetApp().StageGlobal.GetMusicIngame().Stop();
        currentStage++;
        //GetEngine().LogPrint("camniando a la escena "+currentStage);
        if(currentStage>17) currentStage=0;
        if(stage!=null) delete stage;
        if(currentStage>1) GetApp().stageGlobal.play_sound_change_level();
   
        switch (currentStage){
            case 1:
                stage=New Stage1(this);
                break;
            case 2:
                stage=New Stage2(this);
                break;
            case 3:
                stage=New Stage3(this);
                break;
            //Combate boss 1
            case 4:
                GetApp().SetCameraNotMove(true);
                stage=New Stage4(this);
                break;
            case 5: 
                GetApp().SetCameraNotMove(false);
                stage=New Stage5(this);
                break;
            case 6: 
                stage=New Stage6(this);
                break;
            case 7: 
                stage=New Stage7(this);
                break;
            //Combate boss 2
            case 8: 
                GetApp().SetCameraNotMove(true);
                stage=New Stage8(this);
                break;
            case 9: 
                GetApp().SetCameraNotMove(false);
                stage=New Stage9(this);
                break;
            case 10: 
                stage=New Stage10(this);
                break;
            case 11: 
                stage=New Stage11(this);
                break;
            //Combate boss 3: araña gigante
            case 12: 
                stage=New Stage12(this);
                GetApp().SetCameraNotMove(true);
                break;
            // La oscuridad
            case 13: 
                GetApp().SetCameraNotMove(false);
                stage=New Stage13(this);
                break;
            // Pantalla vertical
            case 14: 
                stage=New Stage14(this);
                break;
            // a correr!
            case 15: 
                //GetApp().SetCameraNotMove(true);
                stage=New Stage15(this);
                break;
            //El boss 4 final: el dragón de fuego
            case 16: 
                stage=New Stage16(this);
                break;
            // Pantalla de winner
            case 17:      
                GetApp().SetCameraNotMove(false);
                GetApp().changeWinnerScreen();
                break;
        }
        GetApp().StageGlobal.GetMusicIngame().Play();
        //ponemos la cámara en la posición inicial
        //SetCameraX(0);
        //Le ponemos un efecto de fade
        GetApp().stageGlobal.fadeInEffect();
	}

    //Objects
    function create_object(_type, _x, _y){
        //Crea los objectos del juego, parámetros game, tipo de objeto y posición
        object=NewObject(_type,"object",[this,_type,_x, _y]);
        objects+=[object];
    }
    function delete_objects(){
       	for(x=0; x<sizeof(objects);x++) delete objects[x];
        objects=[];
    }
    function delete_object(_object){
        objects-=[_object];
        delete _object;
    }

    //Enemies
    function create_enemy(_type,_x,_y){
        //GetEngine().LogPrint("vamos a craer un aguila "+_type);
        //Los parámetros son el game y el tipo de enemigo
        _enemy=null;
        switch(_type){
			/**
			 * Los pájaros del 1 al 4 😍 son pájaros que salen por la izquierda
			 * tienen una velocidad aleatoria y una atura aleatoria
			 */
			//Enemigo Aguila de izquierda a derecha
			case ENEMY_TYPE_EAGLE:
				_enemy=NewObject("eagle","BouncesLeftToRight",[this,_type,_x,_y]);
				break;
			//Enemigo Cuervo de izquierda a derecha
			case ENEMY_TYPE_RAVEN:
                _enemy=NewObject("raven","BouncesLeftToRight",[this,_type,_x,_y]);
				break;
			//Enemigo 3
			case ENEMY_TYPE_EAGLE_WHITE:
				_enemy=NewObject("eagleWhite","BouncesLeftToRight",[this,_type,_x,_y]);
				break;
			//Enemigo 4
			case ENEMY_TYPE_RAVEN_BLACK:
       			_enemy=NewObject("ravenBlack","BouncesLeftToRight",[this,_type,_x,_y]);
				break;
			//Buitre que te persigue
			case ENEMY_TYPE_VULTURE:
       			_enemy=NewObject("vulture","Vulture",[this,_type,_x,_y]);
				break;
			// Escorpión
			case ENEMY_TYPE_SQUIRREL:
	   			_enemy=NewObject("squirrel","HorizontalPlatform",[this,_type,_x,_y]);
				break;
			// El murciélago
			case ENEMY_TYPE_BAT:
       			_enemy=NewObject("bat","Bat",[this,_type,_x,_y]);
				break;
			//monstruo que dispara derecha o izquierda
			case ENEMY_TYPE_SHOOT_PLAYER_HORIZONTAL:
                _enemy=NewObject("shootPlayerHorizontal","ShootPlayerHorizontal",[this,_type,_x,_y]);
				break;
			//Monstruo que dispara fuego vertical
			case ENEMY_TYPE_SHOOT_PLAYER_VERTICAL:
                _enemy=NewObject("shootPlayerVertical","ShootPlayerVertical",[this,_type,_x,_y]);
				break;
			// La sierra
			case ENEMY_TYPE_SAW:
                _enemy=NewObject("saw","Saw",[this,_type,_x,_y]);
				break;
			//péndolo
			case ENEMY_TYPE_PENDULUM:
                _enemy=NewObject("pendulum","pendulum", [this,_x, _y, 50]);
				break;
			// Ladrillo que aplasta
			case ENEMY_TYPE_CRUSHING_BRICK:
                _enemy=NewObject("crushingBrick","CrushingBrick",[this,_type,_x,_y]);
				break;
			// Bomba andando
			case ENEMY_TYPE_BOMB:
                _enemy=NewObject("bomb","HorizontalPlatform",[this,_type,_x,_y]);
				break;
			case ENEMY_TYPE_HEDGEHOG:
                _enemy=NewObject("hedgehog","HorizontalPlatform",[this,_type,_x,_y]);
				break;
			case ENEMY_TYPE_WILD_PIG:
                _enemy=NewObject("hedgehog","HorizontalPlatform",[this,_type,_x,_y]);
				break;
			case ENEMY_TYPE_DRAGON:
                _enemy=NewObject("dragon","Dragon",[this,_type,_x,_y]);
				break;
			// El hombre con el martillo
			case ENEMY_TYPE_HAMMER:
                _enemy=NewObject("hammer","Hammer",[this,_type,_x,_y]);
				break;
			// La araña
			case ENEMY_TYPE_SPIDER:
                _enemy=NewObject("spider","HorizontalPlatform",[this,_type,_x,_y]);
				break;
			// calavera pequeña
			case ENEMY_TYPE_SMALL_SKULL:
                _enemy=NewObject("smallSkull","HorizontalPlatform",[this,_type,_x,_y]);
				break;
			case ENEMY_TYPE_LARGE_SKULL:
                _enemy=NewObject("largeSkull","HorizontalPlatformBig",[this,_type,_x,_y]);
				break;
			case ENEMY_TYPE_THIEF:
                _enemy=NewObject("thief","HorizontalPlatformBig",[this,_type,_x,_y]);
				break;
            case ENEMY_TYPE_TURTLE:
	   			_enemy=NewObject("turtle","HorizontalPlatform",[this,_type,_x,_y]);
                break;
            case ENEMY_TYPE_CRAB:
	   			_enemy=NewObject("crab","HorizontalPlatform",[this,_type,_x,_y]);
                break;
            case ENEMY_TYPE_CLOUD:
                _enemy=NewObject("cloud","Cloud",[this,_type,_x,_y]);
                break;
            case ENEMY_TYPE_SLEEPING_BAT:
                _enemy=NewObject("sleepingBat","SleepingBat",[this,_type,_x,_y]);
                break;
            case ENEMY_TYPE_PARACHUTE_BOMB:
                _enemy=NewObject("parachuteBomb","ParachuteBomb",[this,_type,_x,_y]);
                break;
            case ENEMY_TYPE_RHINOCEROS:
                _enemy=NewObject("rhinoceros","BouncesLeftToRight",[this,_type,_x,_y]);
                break;
            default:
                GetEngine().LogPrint("Tipo de enemigo no definido: "+_type);
                break;
        }
        enemies+=[_enemy];
        return _enemy;
    }
    function delete_enemies(){
       	for(x=0; x<sizeof(enemies);x++) delete enemies[x];
		enemies=[];
    }
    function delete_enemy(_enemy){
        enemies-=[_enemy];
        //GetEngine().LogPrint("vamos a drestruir al enemigo");
        _enemy.enemy_set_dead();
    }

    //Fires
    function create_fire(_type,_enemy){
        //GetEngine().LogPrint("Creamos un disparo: "+_type);
        //parámetros game, tipo de fuego y enemigo  
        _fire=NewObject("fire","Fire",[this,_type,_enemy]);
        fires+=[_fire];
        return _fire;
    }
    function delete_fires(_fire){
        if(fires==null || sizeof(fires)==0) return;
        for(x=0; x<sizeof(fires);x++) delete fires[x];
		fires=[];
    }
    function delete_fire(_fire){
        fires-=[_fire];
        delete _fire;
    }
}

        