class Game implements GL_Stage{
    properties:
        bg=null;
        player1=null;
        blocks=[]; 
        fires=[];
        enemies=[];
        //Si ponemos otra escena escribiendo otro número borra el delete stage de la línea 91
        currentStage=0;
        mapper=null;
        stage=null;

    virtual _operator_new(_name,_creators){
        mapper =NewObject("mapper","gl_mapper");
		
        player1=NewObject("player","Player",[this]);
        player1.SetVisible(True);
        
        ChangeStage();
    }
    function _operator_delete(){
        bg.Destroy();
        player1.Destroy();
    }
    function print_score(){
         GetApp().stageGlobal.text_score.SetText("Stage: "+currentStage+"  Score: "+player1.score+" Lives: "+player1.lives+" Keys: "+player1.keys_to_collect);
    }

    function AddActor(_name, _type, _x, _y, _params)
	{
		switch (_type)
		{
			case "suelo": 
                create_block(10,_x, _y);
                break;
			case "suelo2": 
                create_block(10.2,_x, _y);
                break;
            case "plataforma_horizontal": 
                create_block(11,_x, _y);
                break;
            case "plataforma_vertical": 
                create_block(12,_x, _y);
                break;
            case "llaves":
                create_block(7,_x, _y);
                break;  
            case "moneda50":
                create_block(6.50,_x, _y);
                break;  
            case "moneda100":
                create_block(6.100,_x, _y);
                break;  
            case "escorpion":
                _enemy=create_enemy(6,_x, _y);
                break;  
            default:
                GetEngine().LogPrint("Tipo de actor no definido: "+_type);
                break;
		}
	}

    virtual Move(){     
       
        for (i=0; i< sizeof(enemies); i++){
            enemy=enemies[i];
            if(enemy.type==1|| enemy.type==2 || enemy.type==3 || enemy.type==4){
                if(enemy.GetX()<player1.GetX()-380){
                    enemies-=[enemy];
                    enemy.Destroy();
                }
            }  
        } 
        
    }

    function ChangeStage(){
        currentStage++;
        GetEngine().LogPrint("camniando a la escena "+currentStage);
        if(currentStage>4)currentStage=0;
        if(stage!=null) delete stage;
        switch (currentStage){
            case 1:
                stage=New Stage1(this);
                break;
            case 2:
                stage=New Stage2(this);
                break;
            case 3:
                stage=New Stage3(this);
                break;
            case 4:
                stage=New Stage4(this);
                break;
            
            
        }
	}






    function create_block(_type, _x, _y){
        //Crea los bloques del escenario
        block=NewObject(_type,"Block",[this,_type,_x, _y]);
        blocks+=[block];
    }
    function delete_blocks(){
       	for(x=0; x<sizeof(blocks);x++) delete blocks[x];
        blocks=[];
    }
    function delete_block(_block){
        blocks-=[_block];
        delete _block;
    }
    function create_enemy(_type,_x,_y){
        //Los parámetros son el game y el tipo de enemigo
        enemy=NewObject("enemy","Enemy",[this,_type,_x,_y]);
        enemies+=[enemy];
        return enemy;
    }
    function delete_enemies(){
       	for(x=0; x<sizeof(enemies);x++) delete enemies[x];
		enemies=[];
    }
    function delete_enemy(_enemy){
        enemies-=[_enemy];
        delete _enemy;
    }
    function create_fire(_type,_enemy){
        //parámetros game y tipo de fuego
        _fire=NewObject("fire","Fire",[this,_enemy]);
        fires+=[_fire];
    }
    function delete_fires(_fire){
        for(x=0; x<sizeof(fires);x++) delete fires[x];
		fires=[];
    }
    function delete_fire(_fire){
        fires-=[_fire];
        delete _fire;
    }

}

        