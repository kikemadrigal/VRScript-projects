class Game implements GL_Stage{
    properties:
        bg=null;
        player1=null;
        Objects=[]; 
        fires=[];
        enemies=[];
        currentStage=0;
        mapper=null;
        layer=null;
        tileSet=null;
        stage=null;
      
    virtual _operator_new(_name,_creators){
        mapper =NewObject("mapper","gl_mapper");
        tileset=mapper.GetTileset(1);
		
        player1=NewObject("player","Player",[this]);
     
        ChangeStage();
    }
    virtual _operator_delete(){
        /*bg.Destroy();
        delete player1;
        Objects=null; 
        fires=null;
        enemies=null;
        currentStage=0;
        mapper=null;
        layer=null;
        tileSet=null;
        stage=null;*/
    }

    function print_score(){    
        message="Stage: "+currentStage+
                "  Score: "+player1.score+
                " Lives: "+player1.lives+
                " Keys: "+player1.keys_to_collect;    
        if(DEBUG_MODE){
            message+="\nLayers: "+mapper.GetNumLayers()+
                     " right: "+get_tile_right(player1.GetX(),player1.GetY())+
                     " left: "+get_tile_left(player1.GetX(),player1.GetY())+
                     " down: "+get_tile_down(player1.GetX(),player1.GetY());
            message+="\nEnemies: "+sizeof(enemies)+
                    " objects "+sizeof(Objects)+
                    " fires "+sizeof(fires);
            message+="\nFPS: "+GETFPS(1);
        }
        GetApp().stageGlobal.text_score.SetText(message);
    }
    function print_score(_score){
        GetApp().stageGlobal.text_score.SetText(""+_score);
    }
    function draw_boss_live(live){
		 GetApp().stageGlobal.text_boss_live.SetText(""+live);
	}  
    function print_text_game(_text){
        GetApp().stageGlobal.text_game.SetText(_text);
    } 
    function get_tile(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+32,_y+32);
        cell=layer.Get(tile[0] ,tile[1]);    
        return cell[1];
    }
    function get_tile_up(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+32,_y);
        cell=layer.Get(tile[0] ,tile[1]);    
        return cell[1];
    }
    function get_tile_down(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+32,_y+player1.GetHF());
        cell=layer.Get(tile[0] ,tile[1]);
        return cell[1];
    }
    function get_tile_right(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+42,_y+40);
        cell=layer.Get(tile[0] ,tile[1]);
        return cell[1];
    }
    function get_tile_left(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+20,_y+40);
        cell=layer.Get(tile[0] ,tile[1]);
        return cell[1];
    }
    function get_tile_right_object(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+32,_y);
        cell=layer.Get(tile[0] ,tile[1]);
        //GetEngine().LogPrint(""+cell[1]);
        return cell[1];
    }
    function get_tile_left_object(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x,_y);
        cell=layer.Get(tile[0] ,tile[1]);
        //GetEngine().LogPrint(""+cell[1]);
        return cell[1];
    }
    function get_tile_down_object(_x,_y){
        layer=mapper.GetLayer(1);
        tile=mapper.GetCellFromPos(_x+32,_y+32);
        cell=layer.Get(tile[0] ,tile[1]);
        return cell[1];
    }
    function set_tile(_x,_y,_tile){
        
        layer=mapper.GetLayer(1);
        //layer.Set(_x+42,_y+32, tileset, _tile);
        layer.Set(0,0, 1, 1);
    
    }

    function AddActor(_name, _type, _x, _y, _params)
	{
		switch (_type)
		{
            /**
             * Objetos
             */
            case "llaves":
                create_object(OBJECT_TYPE_COLLECTIBLE_KEY,_x, _y);
                break;  
            case "moneda50":
                create_object(OBJECT_TYPE_COLLECTIBLE_COIN50,_x, _y);
                break;  
            case "moneda100":
                create_object(OBJECT_TYPE_COLLECTIBLE_COIN100,_x, _y);
                break;  
            case "plataforma_horizontal":
                create_object(OBJECT_TYPE_PLATFORM_HORIZONTAL,_x, _y);
                break; 
            case "plataforma_vertical":
                create_object(OBJECT_TYPE_PLATFORM_VERTICAL,_x, _y);
                break; 
            case "fuego_que_mata":
                create_object(OBJECT_TYPE_FIRE_DEATH,_x, _y);
                break;  
            case "lava":
                create_object(OBJECT_TYPE_LAVA,_x, _y);
                break;  
            case "paja":
                create_object(OBJECT_TYPE_SAND,_x, _y);
                break;  
            /**
             * Enemigos
             */
            case "escorpion":
                create_enemy(ENEMY_TYPE_SQUIRREL,_x, _y);
                break;  
            case "monstruo1":
                create_enemy(ENEMY_TYPE_SHOOT_PLAYER_HORIZONTAL,_x, _y);
                break; 
            case "monstruo2":
                create_enemy(ENEMY_TYPE_SHOOT_PLAYER_VERTICAL,_x, _y);
                break; 
            case "sierra":
                create_enemy(ENEMY_TYPE_SAW,_x, _y);
                break;
            case "pendulo":
                create_enemy(ENEMY_TYPE_PENDULUM,_x, _y);
                break;
            case "ladrillo-que-aplasta":
                create_enemy(ENEMY_TYPE_CRUSHING_BRICK,_x, _y);
                break;
            case "bomba":
                create_enemy(ENEMY_TYPE_BOMB,_x, _y);
                break;
            case "murcielago":
                create_enemy(ENEMY_TYPE_BAT,_x, _y);
                break;
            default:
                GetEngine().LogPrint("Tipo de actor no definido: "+_type);
                break;
		}
	}



    function ChangeStage(){
        currentStage++;
        //GetEngine().LogPrint("camniando a la escena "+currentStage);
        if(currentStage>13) currentStage=0;
        if(stage!=null) delete stage;
        switch (currentStage){
            case 1:
                stage=New Stage1(this);
                break;
            case 2:
                stage=New Stage2(this);
                break;
            case 3:
                stage=New Stage3(this);
                break;
            //Combate boss 1
            case 4:
                GetApp().SetCameraNotMove(true);
                stage=New Stage4(this);
                break;
            case 5: 
                GetApp().SetCameraNotMove(false);
                stage=New Stage5(this);
                break;
            case 6: 
                stage=New Stage6(this);
                break;
            case 7: 
                stage=New Stage7(this);
                break;
            //Combate boss 2
            case 8: 
                GetApp().SetCameraNotMove(true);
                stage=New Stage8(this);
                break;
            case 9: 
                GetApp().SetCameraNotMove(false);
                stage=New Stage9(this);
                break;
            case 10: 
                stage=New Stage10(this);
                break;
            case 11: 
                stage=New Stage11(this);
                break;
            //Combate final boss 3
            case 12: 
                GetApp().SetCameraNotMove(false);
                stage=New Stage12(this);
                break;
            // Pantalla de winner
            case 13: 
                GetApp().SetCameraNotMove(false);               
                GetApp().changeWinnerScreen();
                break;
        }
        //Le ponemos un efecto de fade
        GetApp().stageGlobal.fadeInEffect();
	}

    //Objects
    function create_object(_type, _x, _y){
        //Crea los objectos del juego, par치metros game, tipo de objeto y posici칩n
        object=NewObject(_type,"object",[this,_type,_x, _y]);
        objects+=[object];
    }
    function delete_objects(){
       	for(x=0; x<sizeof(objects);x++) delete objects[x];
        objects=[];
    }
    function delete_object(_object){
        objects-=[_object];
        delete _object;
    }

    //Enemies
    function create_enemy(_type,_x,_y){
        //Los par치metros son el game y el tipo de enemigo
        enemy=NewObject("enemy","Enemy",[this,_type,_x,_y]);
        enemies+=[enemy];
        return enemy;
    }
    function delete_enemies(){
       	for(x=0; x<sizeof(enemies);x++) delete enemies[x];
		enemies=[];
    }
    function delete_enemy(_enemy){
        enemies-=[_enemy];
        //delete _enemy;
        _enemy.enemy_set_dead();
    }

    //Fires
    function create_fire(_type,_enemy){
        //GetEngine().LogPrint("Creamos un disparo: "+_type);
        //par치metros game, tipo de fuego y enemigo  
        _fire=NewObject("fire","Fire",[this,_type,_enemy]);
        fires+=[_fire];
    }
    function delete_fires(_fire){
        if(fires==null || sizeof(fires)==0) return;
        for(x=0; x<sizeof(fires);x++) delete fires[x];
		fires=[];
    }
    function delete_fire(_fire){
        fires-=[_fire];
        delete _fire;
    }
}

        